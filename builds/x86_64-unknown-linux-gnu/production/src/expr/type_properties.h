/*********************                                                        */
/** type_properties.h
 **
 ** Copyright 2010-2014  New York University and The University of Iowa,
 ** and as below.
 **
 ** This header file automatically generated by:
 **
 **     /home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/expr/mkkind /home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/expr/type_properties_template.h /home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/builtin/kinds /home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/booleans/kinds /home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/uf/kinds /home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/arith/kinds /home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/bv/kinds /home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/arrays/kinds /home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/datatypes/kinds /home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/sets/kinds /home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/strings/kinds /home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/quantifiers/kinds /home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/idl/kinds
 **
 ** for the CVC4 project.
 **/

/* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT ! */
/* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT ! */
/* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT ! */
/* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT ! */
/* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT ! */
/* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT ! */

/* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT ! */
/* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT ! */
/* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT ! */
/* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT ! */
/* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT ! */
/* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT ! */

/* Edit the template file instead:                     */
/* /home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/expr/type_properties_template.h */

/*********************                                                        */
/*! \file type_properties_template.h
 ** \verbatim
 ** Original author: Morgan Deters
 ** Major contributors: none
 ** Minor contributors (to current version): none
 ** This file is part of the CVC4 project.
 ** Copyright (c) 2009-2014  New York University and The University of Iowa
 ** See the file COPYING in the top-level source directory for licensing
 ** information.\endverbatim
 **
 ** \brief Template for the Type properties header
 **
 ** Template for the Type properties header.
 **/

#include "cvc4_private.h"

#ifndef __CVC4__TYPE_PROPERTIES_H
#define __CVC4__TYPE_PROPERTIES_H

#line 23 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/expr/type_properties_template.h"

#include "expr/type_node.h"
#include "util/cvc4_assert.h"
#include "expr/kind.h"
#include "expr/expr.h"
#include "util/language.h"

#include <sstream>

#line 321 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/builtin/kinds"
#include "theory/builtin/theory_builtin_type_rules.h"
#line 326 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/builtin/kinds"
#include "theory/builtin/theory_builtin_type_rules.h"
#line 329 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/builtin/kinds"
#include "theory/builtin/theory_builtin_type_rules.h"
#line 348 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/builtin/kinds"
#include "theory/builtin/theory_builtin_type_rules.h"
#line 351 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/builtin/kinds"
#include "theory/builtin/theory_builtin_type_rules.h"
#line 14 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/booleans/kinds"
#include "expr/node_manager.h"
#line 35 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/arith/kinds"
#include "expr/node_manager.h"
#line 41 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/arith/kinds"
#include "expr/node_manager.h"
#line 53 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/arith/kinds"
#include "theory/arith/theory_arith_type_rules.h"
#line 56 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/arith/kinds"
#include "theory/arith/theory_arith_type_rules.h"
#line 20 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/bv/kinds"
#include "theory/bv/theory_bv_type_rules.h"
#line 34 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/bv/kinds"
#include "theory/type_enumerator.h"
#line 16 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/arrays/kinds"
#include "theory/arrays/theory_arrays_type_rules.h"
#line 19 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/arrays/kinds"
#include "theory/arrays/theory_arrays_type_rules.h"
#line 16 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/datatypes/kinds"
#include "theory/datatypes/theory_datatypes_type_rules.h"
#line 19 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/datatypes/kinds"
#include "theory/datatypes/theory_datatypes_type_rules.h"
#line 27 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/datatypes/kinds"
#include "theory/builtin/theory_builtin_type_rules.h"
#line 34 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/datatypes/kinds"
#include "theory/builtin/theory_builtin_type_rules.h"
#line 50 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/datatypes/kinds"
#include "util/datatype.h"
#line 53 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/datatypes/kinds"
#include "util/datatype.h"
#line 63 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/datatypes/kinds"
#include "util/datatype.h"
#line 66 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/datatypes/kinds"
#include "util/datatype.h"
#line 93 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/datatypes/kinds"
#include "theory/datatypes/theory_datatypes_type_rules.h"
#line 96 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/datatypes/kinds"
#include "theory/datatypes/theory_datatypes_type_rules.h"
#line 129 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/datatypes/kinds"
#include "theory/datatypes/theory_datatypes_type_rules.h"
#line 132 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/datatypes/kinds"
#include "theory/datatypes/theory_datatypes_type_rules.h"
#line 26 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/sets/kinds"
#include "theory/sets/theory_sets_type_rules.h"
#line 29 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/sets/kinds"
#include "theory/sets/theory_sets_type_rules.h"
#line 40 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/strings/kinds"
#include "util/regexp.h"
#line 47 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/strings/kinds"
#include "util/regexp.h"


#line 35 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/expr/type_properties_template.h"

namespace CVC4 {
namespace kind {

/**
 * Return the cardinality of the type constant represented by the
 * TypeConstant argument.  This function is auto-generated from Theory
 * "kinds" files, so includes contributions from each theory regarding
 * that theory's types.
 */
inline Cardinality getCardinality(TypeConstant tc) {
  switch(tc) {
#line 252 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/builtin/kinds"
  case BUILTIN_OPERATOR_TYPE: return Cardinality(Cardinality::INTEGERS);
#line 14 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/booleans/kinds"
  case BOOLEAN_TYPE: return Cardinality(2);
#line 35 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/arith/kinds"
  case REAL_TYPE: return Cardinality(Cardinality::REALS);
#line 41 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/arith/kinds"
  case INTEGER_TYPE: return Cardinality(Cardinality::INTEGERS);
#line 40 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/strings/kinds"
  case STRING_TYPE: return Cardinality(Cardinality::INTEGERS);
#line 47 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/strings/kinds"
  case REGEXP_TYPE: return Cardinality(Cardinality::INTEGERS);
#line 20 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/quantifiers/kinds"
  case BOUND_VAR_LIST_TYPE: return Cardinality(Cardinality::INTEGERS);
#line 27 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/quantifiers/kinds"
  case INST_PATTERN_TYPE: return Cardinality(Cardinality::INTEGERS);
#line 37 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/quantifiers/kinds"
  case INST_PATTERN_LIST_TYPE: return Cardinality(Cardinality::INTEGERS);
#line 53 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/quantifiers/kinds"
  case RRHB_TYPE: return Cardinality(Cardinality::INTEGERS);

#line 49 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/expr/type_properties_template.h"
  default: {
    std::stringstream ss;
    ss << "No cardinality known for type constant " << tc;
    InternalError(ss.str());
  }
  }
}/* getCardinality(TypeConstant) */

/**
 * Return the cardinality of the type represented by the TypeNode
 * argument.  This function is auto-generated from Theory "kinds"
 * files, so includes contributions from each theory regarding that
 * theory's types.
 */
inline Cardinality getCardinality(TypeNode typeNode) {
  AssertArgument(!typeNode.isNull(), typeNode);
  switch(Kind k = typeNode.getKind()) {
  case TYPE_CONSTANT:
    return getCardinality(typeNode.getConst<TypeConstant>());
#line 261 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/builtin/kinds"
  case SORT_TYPE: return Cardinality(Cardinality::INTEGERS);
#line 321 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/builtin/kinds"
  case FUNCTION_TYPE: return ::CVC4::theory::builtin::FunctionProperties::computeCardinality(typeNode);
#line 326 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/builtin/kinds"
  case SEXPR_TYPE: return ::CVC4::theory::builtin::SExprProperties::computeCardinality(typeNode);
#line 348 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/builtin/kinds"
  case SUBTYPE_TYPE: return ::CVC4::theory::builtin::SubtypeProperties::computeCardinality(typeNode);
#line 53 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/arith/kinds"
  case SUBRANGE_TYPE: return ::CVC4::theory::arith::SubrangeProperties::computeCardinality(typeNode);
#line 20 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/bv/kinds"
  case BITVECTOR_TYPE: return ::CVC4::theory::bv::CardinalityComputer::computeCardinality(typeNode);
#line 16 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/arrays/kinds"
  case ARRAY_TYPE: return ::CVC4::theory::arrays::ArraysProperties::computeCardinality(typeNode);
#line 16 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/datatypes/kinds"
  case CONSTRUCTOR_TYPE: return ::CVC4::theory::datatypes::ConstructorProperties::computeCardinality(typeNode);
#line 27 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/datatypes/kinds"
  case SELECTOR_TYPE: return ::CVC4::theory::builtin::FunctionProperties::computeCardinality(typeNode);
#line 34 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/datatypes/kinds"
  case TESTER_TYPE: return ::CVC4::theory::builtin::FunctionProperties::computeCardinality(typeNode);
#line 50 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/datatypes/kinds"
  case DATATYPE_TYPE: return typeNode.getConst<Datatype>().getCardinality();
#line 63 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/datatypes/kinds"
  case PARAMETRIC_DATATYPE: return DatatypeType(typeNode.toType()).getDatatype().getCardinality();
#line 93 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/datatypes/kinds"
  case TUPLE_TYPE: return ::CVC4::theory::datatypes::TupleProperties::computeCardinality(typeNode);
#line 129 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/datatypes/kinds"
  case RECORD_TYPE: return ::CVC4::theory::datatypes::TupleProperties::computeCardinality(typeNode);
#line 26 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/sets/kinds"
  case SET_TYPE: return ::CVC4::theory::sets::SetsProperties::computeCardinality(typeNode);

#line 70 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/expr/type_properties_template.h"
  default: {
    std::stringstream ss;
    ss << "A theory kinds file did not provide a cardinality "
       << "or cardinality computer for type:\n" << typeNode
       << "\nof kind " << k;
    InternalError(ss.str());
  }
  }
}/* getCardinality(TypeNode) */

inline bool isWellFounded(TypeConstant tc) {
  switch(tc) {
#line 252 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/builtin/kinds"
  case BUILTIN_OPERATOR_TYPE: return false;
#line 14 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/booleans/kinds"
  case BOOLEAN_TYPE: return true;
#line 35 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/arith/kinds"
  case REAL_TYPE: return true;
#line 41 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/arith/kinds"
  case INTEGER_TYPE: return true;
#line 40 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/strings/kinds"
  case STRING_TYPE: return true;
#line 47 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/strings/kinds"
  case REGEXP_TYPE: return true;
#line 20 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/quantifiers/kinds"
  case BOUND_VAR_LIST_TYPE: return false;
#line 27 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/quantifiers/kinds"
  case INST_PATTERN_TYPE: return false;
#line 37 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/quantifiers/kinds"
  case INST_PATTERN_LIST_TYPE: return false;
#line 53 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/quantifiers/kinds"
  case RRHB_TYPE: return false;

#line 84 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/expr/type_properties_template.h"
  default: {
    std::stringstream ss;
    ss << "No well-foundedness status known for type constant: " << tc;
    InternalError(ss.str());
  }
  }
}/* isWellFounded(TypeConstant) */

inline bool isWellFounded(TypeNode typeNode) {
  AssertArgument(!typeNode.isNull(), typeNode);
  switch(Kind k = typeNode.getKind()) {
  case TYPE_CONSTANT:
    return isWellFounded(typeNode.getConst<TypeConstant>());
#line 262 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/builtin/kinds"
  case SORT_TYPE: return ::CVC4::theory::builtin::SortProperties::isWellFounded(typeNode);
#line 324 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/builtin/kinds"
  case FUNCTION_TYPE: return false;
#line 329 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/builtin/kinds"
  case SEXPR_TYPE: return ::CVC4::theory::builtin::SExprProperties::isWellFounded(typeNode);
#line 351 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/builtin/kinds"
  case SUBTYPE_TYPE: return ::CVC4::theory::builtin::SubtypeProperties::isWellFounded(typeNode);
#line 56 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/arith/kinds"
  case SUBRANGE_TYPE: return true;
#line 34 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/bv/kinds"
  case BITVECTOR_TYPE: return true;
#line 19 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/arrays/kinds"
  case ARRAY_TYPE: return ::CVC4::theory::arrays::ArraysProperties::isWellFounded(typeNode);
#line 19 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/datatypes/kinds"
  case CONSTRUCTOR_TYPE: return ::CVC4::theory::datatypes::ConstructorProperties::isWellFounded(typeNode);
#line 53 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/datatypes/kinds"
  case DATATYPE_TYPE: return typeNode.getConst<Datatype>().isWellFounded();
#line 66 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/datatypes/kinds"
  case PARAMETRIC_DATATYPE: return DatatypeType(typeNode.toType()).getDatatype().isWellFounded();
#line 96 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/datatypes/kinds"
  case TUPLE_TYPE: return ::CVC4::theory::datatypes::TupleProperties::isWellFounded(typeNode);
#line 132 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/datatypes/kinds"
  case RECORD_TYPE: return ::CVC4::theory::datatypes::TupleProperties::isWellFounded(typeNode);
#line 29 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/sets/kinds"
  case SET_TYPE: return ::CVC4::theory::sets::SetsProperties::isWellFounded(typeNode);

#line 99 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/expr/type_properties_template.h"
  default: {
    std::stringstream ss;
    ss << "A theory kinds file did not provide a well-foundedness "
       << "or well-foundedness computer for type:\n" << typeNode
       << "\nof kind " << k;
    InternalError(ss.str());
  }
  }
}/* isWellFounded(TypeNode) */

inline Node mkGroundTerm(TypeConstant tc) {
  switch(tc) {
#line 252 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/builtin/kinds"
  case BUILTIN_OPERATOR_TYPE: Unhandled(tc);
#line 14 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/booleans/kinds"
  case BOOLEAN_TYPE: return NodeManager::currentNM()->mkConst(false);
#line 35 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/arith/kinds"
  case REAL_TYPE: return NodeManager::currentNM()->mkConst(Rational(0));
#line 41 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/arith/kinds"
  case INTEGER_TYPE: return NodeManager::currentNM()->mkConst(Rational(0));
#line 40 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/strings/kinds"
  case STRING_TYPE: return NodeManager::currentNM()->mkConst(::CVC4::String());
#line 47 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/strings/kinds"
  case REGEXP_TYPE: return NodeManager::currentNM()->mkConst(::CVC4::RegExp());
#line 20 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/quantifiers/kinds"
  case BOUND_VAR_LIST_TYPE: Unhandled(tc);
#line 27 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/quantifiers/kinds"
  case INST_PATTERN_TYPE: Unhandled(tc);
#line 37 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/quantifiers/kinds"
  case INST_PATTERN_LIST_TYPE: Unhandled(tc);
#line 53 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/quantifiers/kinds"
  case RRHB_TYPE: Unhandled(tc);

#line 113 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/expr/type_properties_template.h"
  default: {
    std::stringstream ss;
    ss << "No ground term known for type constant: " << tc;
    InternalError(ss.str());
  }
  }
}/* mkGroundTerm(TypeConstant) */

inline Node mkGroundTerm(TypeNode typeNode) {
  AssertArgument(!typeNode.isNull(), typeNode);
  switch(Kind k = typeNode.getKind()) {
  case TYPE_CONSTANT:
    return mkGroundTerm(typeNode.getConst<TypeConstant>());
#line 262 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/builtin/kinds"
  case SORT_TYPE: return ::CVC4::theory::builtin::SortProperties::mkGroundTerm(typeNode);
#line 324 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/builtin/kinds"
  case FUNCTION_TYPE: Unhandled(typeNode);
#line 329 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/builtin/kinds"
  case SEXPR_TYPE: return ::CVC4::theory::builtin::SExprProperties::mkGroundTerm(typeNode);
#line 351 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/builtin/kinds"
  case SUBTYPE_TYPE: return ::CVC4::theory::builtin::SubtypeProperties::mkGroundTerm(typeNode);
#line 56 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/arith/kinds"
  case SUBRANGE_TYPE: return ::CVC4::theory::arith::SubrangeProperties::mkGroundTerm(typeNode);
#line 34 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/bv/kinds"
  case BITVECTOR_TYPE: return (*CVC4::theory::TypeEnumerator(typeNode));
#line 19 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/arrays/kinds"
  case ARRAY_TYPE: return ::CVC4::theory::arrays::ArraysProperties::mkGroundTerm(typeNode);
#line 19 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/datatypes/kinds"
  case CONSTRUCTOR_TYPE: return ::CVC4::theory::datatypes::ConstructorProperties::mkGroundTerm(typeNode);
#line 53 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/datatypes/kinds"
  case DATATYPE_TYPE: return typeNode.getConst<Datatype>().mkGroundTerm(typeNode.toType());
#line 66 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/datatypes/kinds"
  case PARAMETRIC_DATATYPE: return DatatypeType(typeNode.toType()).getDatatype().mkGroundTerm(typeNode.toType());
#line 96 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/datatypes/kinds"
  case TUPLE_TYPE: return ::CVC4::theory::datatypes::TupleProperties::mkGroundTerm(typeNode);
#line 132 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/datatypes/kinds"
  case RECORD_TYPE: return ::CVC4::theory::datatypes::RecordProperties::mkGroundTerm(typeNode);
#line 29 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/theory/sets/kinds"
  case SET_TYPE: return ::CVC4::theory::sets::SetsProperties::mkGroundTerm(typeNode);

#line 128 "/home/lkloh/cvc4-1.4/builds/x86_64-unknown-linux-gnu/production/../../../src/expr/type_properties_template.h"
  default: {
    std::stringstream ss;
    ss << "A theory kinds file did not provide a ground term "
       << "or ground term computer for type:\n" << typeNode
       << "\nof kind " << k;
    InternalError(ss.str());
  }
  }
}/* mkGroundTerm(TypeNode) */

}/* CVC4::kind namespace */
}/* CVC4 namespace */

#endif /* __CVC4__TYPE_PROPERTIES_H */
